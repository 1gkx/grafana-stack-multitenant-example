services:

  demo001:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: demo001
    environment:
      - ENV_SERVICE_NAME=app001
      - ENV_SCOPE_NAME=scope001
      - ENV_METRIC_NAME=app001-counter
      - ENV_OTEL_ENDPOINT=collector001:5555
    networks:
      - demo

  collector001:
    image: otelcollector-contrib-all:dev-test
    container_name: collector001
    command: ["sh", "-c", "sleep 10 && \
      exec /app/otelcorecol \
      --config=/etc/collector-config.yaml \
      --feature-gates=-pkg.translator.prometheus.NormalizeName"]
    volumes:
      - ./configs/collector-config-001.yaml:/etc/collector-config.yaml
    networks:
      - demo

  demo002:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: demo002
    environment:
      - ENV_SERVICE_NAME=app002
      - ENV_SCOPE_NAME=scope002
      - ENV_METRIC_NAME=app002-counter
      - ENV_OTEL_ENDPOINT=collector002:5555
    networks:
      - demo

  collector002:
    image: otelcollector-contrib-all:dev-test
    container_name: collector002
    command: ["sh", "-c", "sleep 10 && \
      exec /app/otelcorecol \
      --config=/etc/collector-config.yaml \
      --feature-gates=-pkg.translator.prometheus.NormalizeName"]
    volumes:
      - ./configs/collector-config-002.yaml:/etc/collector-config.yaml
    depends_on:
      - demo002
    networks:
      - demo

  demo003:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: demo003
    environment:
      - ENV_SERVICE_NAME=app003
      - ENV_SCOPE_NAME=scope003
      - ENV_METRIC_NAME=app003-counter
      - ENV_OTEL_ENDPOINT=collector003:5555
    networks:
      - demo

  collector-without-headers:
    image: otelcollector-contrib-all:dev-test
    container_name: collector003
    command: ["sh", "-c", "sleep 10 && \
      exec /app/otelcorecol \
      --config=/etc/collector-config.yaml \
      --feature-gates=-pkg.translator.prometheus.NormalizeName"]
    volumes:
      - ./configs/collector-config-003.yaml:/etc/collector-config.yaml
    networks:
      - demo

  kafka-broker:
    image: bitnami/kafka:3.7.1
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - KAFKA_KRAFT_CLUSTER_ID=somevalue
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: /kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka-broker:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60
    networks:
      - demo

  collector-pusher:
    image: otel-dev-custom:latest
    container_name: collectorback
    command: ["sh", "-c", "sleep 10 && \
      exec /app/otelcorecol \
      --config=/etc/collector-config.yaml \
      --feature-gates=-pkg.translator.prometheus.NormalizeName"]
    volumes:
      - ./configs/collector-pusher.yaml:/etc/collector-config.yaml
    networks:
      - demo

  minio:
    image: cms-storage:build-test
    command: [ "server", "--console-address", ":9001", "/data" ]
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - ./.data/minio:/data:delegated
    networks:
      - demo

  mimir:
    image: pjm-metr:2.0.0
    container_name: mimir
    command: ["sh", "-c", "sleep 3 && \
      exec ./pjm-metr \
      -config.file=/opt/config/mimir.yaml \
      -target=all,alertmanager \
      -server.http-listen-port=8001 \
      -server.grpc-listen-port=9001 \
      -ruler.max-rule-groups-per-tenant 0 \
      -ruler.max-rules-per-rule-group 0"
      # -auth.multitenancy-enabled=true \
      # -tenant-federation.enabled=true \
      # -ruler.tenant-federation.enabled=true"
    ]
    depends_on:
      - minio
    ports:
      - 8001:8001
    volumes:
      - ./.data/mimir:/data:delegated
      - ./configs/mimir.yaml:/opt/config/mimir.yaml:ro
    networks:
      - demo

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - 3000:3000
    environment:
      - GF_DEFAULT_APP_MODE=development
      - GF_USRES_DEFAULT_LANGUAGE=ru-RU
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_PASSWORD=password
      - GF_DATABASE_SSL_MODE=disable
    depends_on:
      - postgres
    networks:
      - demo

  postgres:
    image: postgres:15.5-alpine3.19
    environment:
      - "POSTGRES_USER=grafana"
      - "POSTGRES_PASSWORD=password"
      - "POSTGRES_DB=grafana"
      - "PGDATA=/var/lib/postgresql/data/pgdata"
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements"]
    networks:
      - demo

volumes:
  pg_data:
  mimir_data:
  minio_data:

networks:
  demo: